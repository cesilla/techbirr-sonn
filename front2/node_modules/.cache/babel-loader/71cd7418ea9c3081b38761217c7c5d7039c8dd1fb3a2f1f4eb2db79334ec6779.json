{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ESC\\\\Desktop\\\\TechBirr\\\\front2\\\\src\\\\components\\\\WalletConnector.js\",\n  _s = $RefreshSig$();\n// src/components/WalletConnector.js\nimport React, { useEffect, useState } from 'react';\nimport TonConnect, { Wallet } from '@tonconnect/sdk';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WalletConnector = ({\n  onConnectWallet\n}) => {\n  _s();\n  const [wallet, setWallet] = useState(null);\n  const [address, setAddress] = useState('');\n  const [balance, setBalance] = useState('');\n  const tonConnect = new TonConnect();\n  useEffect(() => {\n    // Check if a wallet is already connected\n    const storedWallet = localStorage.getItem('wallet');\n    if (storedWallet) {\n      const walletData = JSON.parse(storedWallet);\n      setWallet(walletData);\n      setAddress(walletData.account.address);\n      setBalance(walletData.balance);\n    }\n  }, []);\n  const connectWallet = async () => {\n    try {\n      // Connect to Ton Wallet\n      const walletsList = await tonConnect.getWallets();\n      if (walletsList.length === 0) {\n        throw new Error('No wallets found');\n      }\n      const selectedWallet = walletsList[0]; // Select the first wallet\n      await tonConnect.connectWallet(selectedWallet);\n\n      // Get wallet address and balance\n      const walletState = await tonConnect.getWalletState();\n      const walletAddress = walletState.account.address;\n\n      // Fetch balance using an external API or SDK method\n      const balance = await fetchBalance(walletAddress);\n      const walletData = {\n        account: {\n          address: walletAddress\n        },\n        balance\n      };\n      setWallet(walletData);\n      setAddress(walletAddress);\n      setBalance(balance);\n      localStorage.setItem('wallet', JSON.stringify(walletData));\n      onConnectWallet();\n    } catch (error) {\n      console.error('Ton Wallet connection failed:', error);\n    }\n  };\n  const disconnectWallet = () => {\n    tonConnect.disconnectWallet();\n    setWallet(null);\n    setAddress('');\n    setBalance('');\n    localStorage.removeItem('wallet');\n  };\n\n  // Function to fetch balance from an external API\n  const fetchBalance = async address => {\n    // Replace with the actual API call to get the balance\n    const response = await fetch(`https://tonapi.io/v1/account/getInfo?account=${address}`);\n    const data = await response.json();\n    return data.balance;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: wallet ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Connected wallet address: \", address]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your balance: \", balance]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: disconnectWallet,\n        children: \"Disconnect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectWallet,\n      children: \"Connect with Ton Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(WalletConnector, \"gFxw80a+jHr1naqnWPSKH8SE6JA=\");\n_c = WalletConnector;\nexport default WalletConnector;\nvar _c;\n$RefreshReg$(_c, \"WalletConnector\");","map":{"version":3,"names":["React","useEffect","useState","TonConnect","Wallet","jsxDEV","_jsxDEV","WalletConnector","onConnectWallet","_s","wallet","setWallet","address","setAddress","balance","setBalance","tonConnect","storedWallet","localStorage","getItem","walletData","JSON","parse","account","connectWallet","walletsList","getWallets","length","Error","selectedWallet","walletState","getWalletState","walletAddress","fetchBalance","setItem","stringify","error","console","disconnectWallet","removeItem","response","fetch","data","json","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ESC/Desktop/TechBirr/front2/src/components/WalletConnector.js"],"sourcesContent":["// src/components/WalletConnector.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport TonConnect, { Wallet } from '@tonconnect/sdk';\r\n\r\nconst WalletConnector = ({ onConnectWallet }) => {\r\n  const [wallet, setWallet] = useState(null);\r\n  const [address, setAddress] = useState('');\r\n  const [balance, setBalance] = useState('');\r\n\r\n  const tonConnect = new TonConnect();\r\n\r\n  useEffect(() => {\r\n    // Check if a wallet is already connected\r\n    const storedWallet = localStorage.getItem('wallet');\r\n    if (storedWallet) {\r\n      const walletData = JSON.parse(storedWallet);\r\n      setWallet(walletData);\r\n      setAddress(walletData.account.address);\r\n      setBalance(walletData.balance);\r\n    }\r\n  }, []);\r\n\r\n  const connectWallet = async () => {\r\n    try {\r\n      // Connect to Ton Wallet\r\n      const walletsList = await tonConnect.getWallets();\r\n      if (walletsList.length === 0) {\r\n        throw new Error('No wallets found');\r\n      }\r\n      \r\n      const selectedWallet = walletsList[0]; // Select the first wallet\r\n      await tonConnect.connectWallet(selectedWallet);\r\n\r\n      // Get wallet address and balance\r\n      const walletState = await tonConnect.getWalletState();\r\n      const walletAddress = walletState.account.address;\r\n      \r\n      // Fetch balance using an external API or SDK method\r\n      const balance = await fetchBalance(walletAddress);\r\n\r\n      const walletData = {\r\n        account: { address: walletAddress },\r\n        balance,\r\n      };\r\n\r\n      setWallet(walletData);\r\n      setAddress(walletAddress);\r\n      setBalance(balance);\r\n\r\n      localStorage.setItem('wallet', JSON.stringify(walletData));\r\n      onConnectWallet();\r\n    } catch (error) {\r\n      console.error('Ton Wallet connection failed:', error);\r\n    }\r\n  };\r\n\r\n  const disconnectWallet = () => {\r\n    tonConnect.disconnectWallet();\r\n    setWallet(null);\r\n    setAddress('');\r\n    setBalance('');\r\n    localStorage.removeItem('wallet');\r\n  };\r\n\r\n  // Function to fetch balance from an external API\r\n  const fetchBalance = async (address) => {\r\n    // Replace with the actual API call to get the balance\r\n    const response = await fetch(`https://tonapi.io/v1/account/getInfo?account=${address}`);\r\n    const data = await response.json();\r\n    return data.balance;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {wallet ? (\r\n        <div>\r\n          <p>Connected wallet address: {address}</p>\r\n          <p>Your balance: {balance}</p>\r\n          <button onClick={disconnectWallet}>Disconnect Wallet</button>\r\n        </div>\r\n      ) : (\r\n        <button onClick={connectWallet}>Connect with Ton Wallet</button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WalletConnector;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}