{"ast":null,"code":"const TelegramBot = require('node-telegram-bot-api');\nconst axios = require('axios');\n\n// Telegram bot token'ınızı buraya ekleyin\nconst TELEGRAM_BOT_TOKEN = '7064727934:AAFshdC35E6I0DUB_L9TDFKsU7KOKqykaPo';\n\n// Telegram botunu başlat\nconst bot = new TelegramBot(TELEGRAM_BOT_TOKEN, {\n  polling: true\n});\n\n// API anahtarını buraya ekleyin\nconst API_KEY = '4bd4638b477bd7958330d49bfc443fa7ecea20e1ef18948f80d59ee8ae09da7';\n\n// Ton Blockchain adresini buraya ekleyin\nconst DEPLOYED_CONTRACT_ADDRESS = 'EQDA1CI-LqUuhJNIzsaSdusWxcIy7FAHRBwB9aoslfhJbmbl';\n\n// getAddressInformation fonksiyonunu tanımla\nasync function getAddressInformation() {\n  try {\n    console.time('API Request'); // İstek süresini ölçmek için başlangıç\n    const response = await axios.get('https://toncenter.com/api/v2/getAddressInformation', {\n      params: {\n        address: DEPLOYED_CONTRACT_ADDRESS\n      },\n      headers: {\n        'X-API-Key': API_KEY,\n        'Accept': 'application/json'\n      }\n    });\n    console.timeEnd('API Request'); // İstek süresini ölçmek için bitiş\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching address information:', error);\n    throw error;\n  }\n}\n\n// Bot mesaj dinleyicisi\nbot.on('message', async msg => {\n  const chatId = msg.chat.id;\n  console.log(`Received message from ${chatId}`);\n\n  // Kullanıcıya adres bilgilerini gönder\n  try {\n    console.time('getAddressInformation'); // İşlem süresini ölçmek için başlangıç\n    const addressInfo = await getAddressInformation();\n    console.timeEnd('getAddressInformation'); // İşlem süresini ölçmek için bitiş\n\n    const message = `\nAddress Information:\n- Balance: ${addressInfo.result.balance}\n- Last Transaction ID: ${addressInfo.result.last_transaction_id.hash}\n- State: ${addressInfo.result.state}\n        `;\n    bot.sendMessage(chatId, message);\n  } catch (error) {\n    bot.sendMessage(chatId, 'Error fetching address information.');\n  }\n});","map":{"version":3,"names":["TelegramBot","require","axios","TELEGRAM_BOT_TOKEN","bot","polling","API_KEY","DEPLOYED_CONTRACT_ADDRESS","getAddressInformation","console","time","response","get","params","address","headers","timeEnd","data","error","on","msg","chatId","chat","id","log","addressInfo","message","result","balance","last_transaction_id","hash","state","sendMessage"],"sources":["C:/Users/ESC/Desktop/TechBirr/front2/src/components/QuranVerses.js"],"sourcesContent":["const TelegramBot = require('node-telegram-bot-api');\r\nconst axios = require('axios');\r\n\r\n// Telegram bot token'ınızı buraya ekleyin\r\nconst TELEGRAM_BOT_TOKEN = '7064727934:AAFshdC35E6I0DUB_L9TDFKsU7KOKqykaPo';\r\n\r\n// Telegram botunu başlat\r\nconst bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });\r\n\r\n// API anahtarını buraya ekleyin\r\nconst API_KEY = '4bd4638b477bd7958330d49bfc443fa7ecea20e1ef18948f80d59ee8ae09da7';\r\n\r\n// Ton Blockchain adresini buraya ekleyin\r\nconst DEPLOYED_CONTRACT_ADDRESS = 'EQDA1CI-LqUuhJNIzsaSdusWxcIy7FAHRBwB9aoslfhJbmbl';\r\n\r\n// getAddressInformation fonksiyonunu tanımla\r\nasync function getAddressInformation() {\r\n    try {\r\n        console.time('API Request'); // İstek süresini ölçmek için başlangıç\r\n        const response = await axios.get('https://toncenter.com/api/v2/getAddressInformation', {\r\n            params: {\r\n                address: DEPLOYED_CONTRACT_ADDRESS\r\n            },\r\n            headers: {\r\n                'X-API-Key': API_KEY,\r\n                'Accept': 'application/json'\r\n            }\r\n        });\r\n        console.timeEnd('API Request'); // İstek süresini ölçmek için bitiş\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error fetching address information:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// Bot mesaj dinleyicisi\r\nbot.on('message', async (msg) => {\r\n    const chatId = msg.chat.id;\r\n    console.log(`Received message from ${chatId}`);\r\n\r\n    // Kullanıcıya adres bilgilerini gönder\r\n    try {\r\n        console.time('getAddressInformation'); // İşlem süresini ölçmek için başlangıç\r\n        const addressInfo = await getAddressInformation();\r\n        console.timeEnd('getAddressInformation'); // İşlem süresini ölçmek için bitiş\r\n\r\n        const message = `\r\nAddress Information:\r\n- Balance: ${addressInfo.result.balance}\r\n- Last Transaction ID: ${addressInfo.result.last_transaction_id.hash}\r\n- State: ${addressInfo.result.state}\r\n        `;\r\n        bot.sendMessage(chatId, message);\r\n    } catch (error) {\r\n        bot.sendMessage(chatId, 'Error fetching address information.');\r\n    }\r\n});\r\n"],"mappings":"AAAA,MAAMA,WAAW,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AACpD,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAO,CAAC;;AAE9B;AACA,MAAME,kBAAkB,GAAG,gDAAgD;;AAE3E;AACA,MAAMC,GAAG,GAAG,IAAIJ,WAAW,CAACG,kBAAkB,EAAE;EAAEE,OAAO,EAAE;AAAK,CAAC,CAAC;;AAElE;AACA,MAAMC,OAAO,GAAG,iEAAiE;;AAEjF;AACA,MAAMC,yBAAyB,GAAG,kDAAkD;;AAEpF;AACA,eAAeC,qBAAqBA,CAAA,EAAG;EACnC,IAAI;IACAC,OAAO,CAACC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;IAC7B,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAG,CAAC,oDAAoD,EAAE;MACnFC,MAAM,EAAE;QACJC,OAAO,EAAEP;MACb,CAAC;MACDQ,OAAO,EAAE;QACL,WAAW,EAAET,OAAO;QACpB,QAAQ,EAAE;MACd;IACJ,CAAC,CAAC;IACFG,OAAO,CAACO,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;IAChC,OAAOL,QAAQ,CAACM,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZT,OAAO,CAACS,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC3D,MAAMA,KAAK;EACf;AACJ;;AAEA;AACAd,GAAG,CAACe,EAAE,CAAC,SAAS,EAAE,MAAOC,GAAG,IAAK;EAC7B,MAAMC,MAAM,GAAGD,GAAG,CAACE,IAAI,CAACC,EAAE;EAC1Bd,OAAO,CAACe,GAAG,CAAC,yBAAyBH,MAAM,EAAE,CAAC;;EAE9C;EACA,IAAI;IACAZ,OAAO,CAACC,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC;IACvC,MAAMe,WAAW,GAAG,MAAMjB,qBAAqB,CAAC,CAAC;IACjDC,OAAO,CAACO,OAAO,CAAC,uBAAuB,CAAC,CAAC,CAAC;;IAE1C,MAAMU,OAAO,GAAG;AACxB;AACA,aAAaD,WAAW,CAACE,MAAM,CAACC,OAAO;AACvC,yBAAyBH,WAAW,CAACE,MAAM,CAACE,mBAAmB,CAACC,IAAI;AACpE,WAAWL,WAAW,CAACE,MAAM,CAACI,KAAK;AACnC,SAAS;IACD3B,GAAG,CAAC4B,WAAW,CAACX,MAAM,EAAEK,OAAO,CAAC;EACpC,CAAC,CAAC,OAAOR,KAAK,EAAE;IACZd,GAAG,CAAC4B,WAAW,CAACX,MAAM,EAAE,qCAAqC,CAAC;EAClE;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}